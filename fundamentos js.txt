Tipo de valores:
number (1228)
string (texto)
boolean (true, false)
objet ([],{})




valores verdaderos y valores falsos (para validar que si es falso o verdadero se utiliza en la consola boolean(el valor que se quiera validar))
vardaderos - cualquier numero mayor a 0," "(cualquier string o espacio vacio),[] (cualquier array asi este vacio),{}(aunque este vacio),function (aunque este vacia),true
falsos - 0,null,NaN,undefined,false,""(sin espacio).



typeof - para saber que tipo de valor es;

varibles - permite guardar informacion en memoria;

var - palabra reservada para las variables que ya no se deberia utilizar ya que pueden haber conflictos porque se pueden redeclarar(var nombre = "Cristian");
let - varible que permite ser re-inicializada pero no se puede re-declarar(let name = "Cristian"; name = "Camilo");
const - varibale que ni se puede re-inizializar ni re-declarar (const name = "Cristian"; const name = "Camilo" sintaxis error);



Funciones: nos permite ejecutar bloques de codigo;

function - palabra reservada para las funciones;
funcion declarativa - function miFuncion (parametros) { operacion que va hacer la funcion};
funcion expresiva - var function = function (){};
function saludar (estudiante) { return ( `Hola ${estudiante}`)};
function suma(a,b,c) {
    var resultado = a + b * c;
    return resultado;
};



funciones flecha: funcionan igual a funciones expresivas (teniendo que declararlas con una variable const)con la palabra reservada function pero su sintaxis es mas corta, (const name = (parametros) => {return valorretornado}));
const nombre = (parámetros) => {
    return valorRetornado
};
Las funciones flecha tienen un retorno implícito, es decir, se puede omitir la palabra reservada return, para que el código sea escrito en una sola línea;
const suma = (num1, num2) => num1 + num2; en este caso retorna (sin ponerle retorn en la funcion) la suma de num1 + num2;
otros ej de la funcion flecha;
let a = 4;
let b = 2;
() => a + b + 100;

(a, b) => {
  let chuck = 42;
  return a + b + chuck;

};
let bob = a => a + 100;



default params - parametros por defecto - nos sirve para asignar paramentros por defecto en una funcion;

function newUser( name = "Carlos", age = 24, country = "col"){
	console.log(name,age,country);
};



function rest - sirve para agregar parametros a una funcion que todavia no estan definidos, metiendolos en un array;

function sum( num, ...values){
	console.log(values);
	console.log(num + values[1]);

}



async function - funciones asincronas - son funciones en las que se les pueden poner un tiempo expecifico antes de ejecutar su bloque de codigo de una promesa;

async - antes de la funcion flecha indica que es una funcion asincrona y por ese motivo siempre devolvera una promesa,

await - se utiliza esta palabra reservada de JS para decirle al programa que espere el resultado de la promesa para ejecutar el bloque de codigo de la funcion asincrona pero sin detener la ejecucion del resto del codigo;  

const fnAsync = () => {
    return new Promise((resolve, reject) => {
        (true)
        ? setTimeout(() => resolve ("AsynC!!"), 2000)
        : reject(new Error("Error"));
    });
}

const anotherFn = async () => {
    const something = await fnAsync();
    console.log(something);
    console.log("Hello");
}

console.log("before");
anotherFn();
console.log("After");



coercion - es cuando se cambia el tipo de valor ya sea explicitamente o implicitamente;

implicitamente - 2 + "7" da = 27 (string) o 2 * "7" da = 14 (number);

explicitamente - var a = 20 (number) y var b = a + "" daria de resultado el mismo 20 pero como string o tambien var c = string(a) o var d = number(c)




Operadores 
+,-,*,/ - para operaciones matematicas
+ - para concatenar (sumar) strings u otros valores 
! - para negar cualquier cosa - !false es = a true
= - para asiganar valores
== - para comparar valores (3 == "3" = true son iguales)
=== - para compara valores y su tipo (3 === "3" = false no son iguales uno es number el otro string)
< - para validar si un numero es menor que otro (5<6  true )
> - para validar si un numero es mayor que otro (5>6 false )
<= - para validar en 2 pasos si un numero es menor o igual a otro (5<=6 true o 5<=5 true)
>= - para validar en 2 pasos si un numero es mayor o igaul a otro (5>=6 false 5>=5 true)
&& - para validar si las 2 variables son verdaderas para cumlplir una condicion(a && b ) si a y b son verdaderas se cumple la condicion
|| - para validar si 1 de las 2 condiciones son verdaderas (a || b) si a o b son verdaderas se cumple la condicion
++ - para incrementar el numero de una variable en +1 ( var edad = 20 si edad++ edad=41) tambien funciona para disminuir 1 con --
+= - para incrementar el numero de una variable en una cantidad deseada (edad+=5) tambien funciona para disminuir -=
** - para utilizar operaciones matematicas de potenciacion (let potencia = 3**3)



condicional if:
if - para validar condiciones que solo se ejecutan si la condicion en true (if (true){})
else if - segundo paso para seguir validando una condicion si la primera validacion(if) no es true (if(false){} else if(){} )
else - ultimo paso en una validacion si el if no es true y else if tambien es false ocurrira lo que se ponga en corchetes de else ( if(false){} else if(false) {} else{}) 

var edad = 18

if (edad === 18) {
  return ("bienvenido puedes votar por 1ra vez");
} else if (edad > 18) {
    return ("puedes votar nuevamente");
} else {
  return ("aun no puedes votar");
}

tambien se pueden hacer if y else en una sola linea con un sigo de ?;  condition ? true : false
var numero = 1;
 
var resultado = numero === 1 ? "Si, soy un uno" : "No, no soy un uno";



condicional switch

se utilizar para validar casos, switch (){}, es muy importante al final de cada case poner break para que no se rompa el codigo y siga validando los casos.
se utiliza default al final del switch si ninguno de los casos es true

var numero = 1;

switch (numero) {
  case 1:
	console.log ("si soy un 1");
	break;
  case 5:
	console.log ("si soy un 5");
	break;
  case 10:
	console.log ("si soy un 10");
	break;
  default:
	console.log("No soy nada");
}



Arrays - es una estructura de datos que puede guardar varios tipos de valores (strings,numbers,objets u another arrays) y su estructura es, var nombredelavar = [aqui se guardan los valores]
ej: var frutas = ["Manzanas","Peras","Fresas"];

nombredelarray.length - para saber la longitud de un array;

var masFrutas = frutas.push("Uvas") - para agregar un valor al final de un array;

var retirarfruta = frutas.pop("Uvas") - para eliminar el ultimo valor de un array;

var nuevafruta = frutas.unshift("Uvas") - para agregar un valor al inicio del array;

var quitarfruta = frutas.shift("Uvas") - para eliminar el primer valor de un array;

var posicion = frutas.indexof(lo que se quiera buscar) - para saber la posicion de un valor dentro de un array.


obtener el ultimo valor de un array sin saber su indice o el numero total de valores:
.at - array.at(-1)
array[array.length -1]; los valores negativos ( < 0) sirven para recorrer los arrays de der a izq (-1 es el ultimo valor, -2 el penultimo valor, -3 el antepenultimo valor y 0 seria el primer valor),
 

array.flat() - para aplanar un array (dejar todos los niveles que tenga de profundidad en uno solo), expecificando el el parentesis hasta que nivel de profundidad queremos aplanar;

let array = [1,2,3,4,[4,8,7,9,[4,8,4,2]]];
console.log (array.flat(1));


array.flatMap() - funciona parecido a el metodo .flat pero solo en 1 nivel de profundidad(osea nvl 0 y si se requiere mas niveles es puede encadenar con el .flat primero) y con el resultado de el flat se puede hacer una arrow function para hacer algo con el valor retornado;

const numbers2 = [1, 2, 3, 4, 5, 6, 7, 8, 9];

numbers2.flatMap(num => num * 2); usando solo el flatMap;


numbers2.flat(Infinity).map(num => num * 2); encadenando el .flat con .flatMap para ejecutarlo con mas niveles de profundidad;



objet.fromEntries -  es un metodo de los arrays para obtener de ellos su informacion y transformarla en objetos;

const entries = new Map ([["name", "Cristian"], ["age", 27]]); tambien funciona con un array normal (sin el new map) let entries = [["Name","Cristian"],["Age", 27]];
console.log(entries);
console.log(Object.fromEntries(entries));



loops (ciclos) - para repetir funciones en ciclos hasta que la funcion se rompa o deje de ser true.

loop for - 

var estudiantes = ["Cristian","Camilo","Fabricio","Roberto"]

function saludarEstudiantes (estudiante) {
	console.log(`Hola, ${estudiante}`);
}

for (var i = 0; i < estudiantes.length; i++){
	saludarEstudiantes(estudiantes[i]);
}

var estudiantes = ["Cristian","Camilo","Fabricio","Roberto"]

function saludarEstudiantes (estudiante) {
	console.log(`Hola, ${estudiante}`);
}

for (var estudiante of estudiantes) {
	saludarEstudiantes(estudiante)
}


En el loop for tambien se puede ejecutar con asincronismo solo poniendo la palabra async antes de la funcion y await despues del for en el bloque de ejecucion de la funcion;

async function arrayOfNames(array) {
    for await (let value of array) {
        console.log(value);
    }
}

const names =arrayOfNames(["Alexa", "Oscar", "David"]);
console.log("After");


loop while - funciona de forma parecida al for pero este lo que hace es ir sacando valores de array con el shift

var estudiantes = ["Cristian","Camilo","Fabricio","Roberto"];

function saludarEstudiantes (estudiante) {
	console.log(`Hola, ${estudiante}`);
}

while (estudiantes.length > 0 ) {
	var estudiante = estudiantes.shift();
	saludarEstudiantes(estudiante)
}



prompt - imprime un popup al usuario y les permite escribir.

let respuesta = prompt("Cuanto es 2 + 2") - imprime en la pantalla un popup con la la pregunta y guarda en la variable lo que el usuario responda

loop con prompt - imprime un popup al usuario y les permite escribir algo mediante la creacion de una variable y se ejecuta hasta que sea true con el loop while

let respuesta;

while (respuesta !="4"){
    let pregunta = prompt("cuanto es 2 + 2?")
    respuesta = pregunta;
} 

En este caso se repite el loop hasta que la respuesta sea 4.



Objects - los objetos son representacion de objetos fisicos que tienes varias caracteristicas en objetos de codigo ( var nombredelavar = {} )

var miCarro = {
	marca: "Toyota",
	modelo: "Corolla",
	año: 2020,
	 function (){
		console.log(`Auto ${this.modelo} ${this.año } `);
	}
};

Para separar las caracteristicas dentro del objeto se debe de poner siempre una coma(,)
para mandar a llamar una caracteristica en especifico del objeto se utiliza el nombre de la variable + un punto y la caracteristica o funcion requerida ( miCarro.detallesDelAuto)



destructuracion de objetos - objects destructuring - sirve para destructurar en objetos en los componentes que se necesiten;

let user = {
	username: "Cristian",
	nickname: "Hitman",
	age: 27
}
let {username,nickname,age} = user
console.log(username,age);



objet.entries - es un metodo de los objetos para obtener de ellos su informacion y transformarla en arrays (Object.entries(object que se quiera trabajar));

const countries = {MX: "Mexico",CO: "Colombia", PE: "Perú", AR: "Argentina"};

console.log (Object.entries(countries));



values - es una funciion de los objetos para obtener un array con los valores de un objeto (Object.values(object que se quiera trabajar));

const countries = {MX: "Mexico",CO: "Colombia", PE: "Perú", AR: "Argentina"};

console.log (Object.values(countries));



spread operator - esta funcionalidad de los objets permite crear un nuevo objet, agregando informacion adicional solo poniendo ... ;

let person = {name:"Cristian", age: 27 };
let country = "Col";

let data = {...person,country}
console.log(data) - se crea un object con la informacion de person + country;

const user = { username: "gndx", age: 34, coutry: "CO" };
const { username, ...values } = user;
console.log(username);
console.log(values);
	


Funcion constructora:

sirve para generar objetos de manera mas automatica

function carro(marca,modelo,año) {
	this.marca = marca;
	this.modelo = modelo;
	this.año = año;
}

var carroNuevo = new carro("Tesla","Model 3", 2019) 



Metodos de recorrido de arrays - estos metodos sirven para filtrar informacion de un array


metodo filter 

var articulos = [
  { nombre: "Bici", costo: 3000 },
  { nombre: "TV", costo: 2500 },
  { nombre: "Libro", costo: 320 },
  { nombre: "Celular", costo: 10000 },
  { nombre: "Laptop", costo: 20000 },
  { nombre: "Teclado", costo: 500 },
  { nombre: "Audifonos", costo: 1700 },
]

var articulosFiltrados = articulos.filter(function (articulo) {
  return articulo.costo <= 500
})



metodo map 

var nombreArticulos = articulos.map(function (articulo) {
  return articulo.nombre
})
console.log(nombreArticulos);



metodo find

El método find consiste en encontrar el primer elemento de un array que cumpla con la condición especificada en la función 

var algunArticulo = articulos.find(function (articulo) {
  return (articulo.nombre === "Laptop")
});



metodo forEach

Con este metodo no se genera un nuevo array solo devuelve las caracteristicas de los objetos que cumplan el parametro de la funcion.


articulos.forEach(function (articulo) {
  console.log(articulo.nombre)
});



metodo some

genera un array que solo verifica si la funcion es true or false.

var existeArticulo = articulos.some(function (articulo) {
  return articulo.costo <= 700
});



metodo includes - sirve para saber si algo se encuentra en un array retornando un valor booleano;

let numbers = [1,2,3,4,5,6];

console.log(numbers.includes(2))



metodo de desestructuracion - 

let fruits = ['Apple', 'Banana', 'Orange',"pineapple"];

let [a,b,c,d] = fruits;
console.log(b,d);
console.log(a,fruits[2])



object literals - sirve para retornar los argumentos dados a una funcion en un objet;

function newUser(user, age, country, id){
	return {
	   user,
	   age,		 
	   country,
	   id
        }
      }
console.log(newUser("Hitman1228",34,"Col"));



promises- promesas - es una funcion que recive de parametro otra funcion y la ejecuta segun sea el caso;

.then - es una funcion de las promesas que retorna la promesa siempre y cuando sea resulta como true y despues que hay que poner que se va hacer con lo retornado de la promesa;

.catch - nos retorna el resultado de la promesa pero cuando el resultado es reject(false) y desde hay que poner que se va hacer con lo retornado por la promesa;

.finally - nos permite ejecutar una arrow function al final de una promesa si se requiere;


const anotherFuncion = () => {
    return new Promise((resolve, reject) => {
        if (true) {
            resolve("hey!!");
        } else {
            reject ( "whooooops!");
        }
    })
}

anotherFuncion()
 .then(response => console.log(response))
 .catch(err => console.log(err));
 .finally(()=> console.log('Finally'));


.allSettled - nos regresa un objeto con la infomacion de el resultado de las promesas que se le den como argumento;

const promise1 = new Promise((resolve, reject) => reject("reject"));
const promise2 = new Promise((resolve, reject) => resolve("resolve"));
const promise3 = new Promise((resolve, reject) => resolve("resolve2"));

Promise.allSettled([promise1, promise2, promise3])
.then(response => console.log(response));


.any - nos regresa la primera promesa que se cumpla de una serie de promesas dadas;

Promise.any([promise1, promise2, promise3])
.then(response => console.log(response));



class - clases - funciona como una plantilla para crear nuevos objetos con los mismos atributos (variables) y metodos (funciones), para crear este nuevo objeto se crea una una variable llamando a la clase con el funcion new;

class Player {
    constructor(nombre, colorSombrero){
        this.nombre = nombre;
        this.colorSombrero = colorSombrero;
    }
    saludar(){
        return `Hola soy ${this.nombre} y mi sombrero es ${this.colorSombrero}`;
    };
    get getnombre(){
        return this.nombre;
    }
    set nombreModificado(nuevoNombre){
        this.nombre = nuevoNombre;
    }
}

let player1 = new Player (`Mario`, `Rojo`);
let player2 = new Player (`Luigi`,`Verde`);

console.log (player1);
console.log (player2);

console.log(player2.saludar()); 

console.log(player1.nombre);
player1.nombre = "Cristian";
console.log(player1.nombre);

para mandar a llamar un metodo(funcion) dentro de la clase y con get se puede obtener la informacion de un atributo y con set se puede modificar el valor de un atributo; 

si se agrega el caracterer # antes del nombre del metodo, se vuevle privado y solo se puede acceder dentro de la misma clase;



modul - modulos - nos sirve para importar y exportar infromacion de un archivo .JS a otro con 2 formas y para que se pueda trabajar con modulos en una carpeta hay que agregar al archivo package.json el siguiente apartado "type": "module", aunque tambien se pueden omitir esto simplemente agregando la extension .mjs a los archivos que se van a trabajar

1ra forma = export default + el nombre de la funcion o variable que se vaya a exportar

import + el nombre de la funcion o variable que se vaya a importar + from "el origen del archivo que se va a importar" hay que tener presente que se puede requerir poner la extension al archivo que se esta importado en la ruta  ej:

import amigo from "./00-let-const.js";


2da forma = export {function or var que se quiera exportar};

import {the function or var que se quiera importar} + from "el origen del archivo que se va a importar" ej:

import { amigo } from "./00-let-const.js";

tambien se puede hacer el import y export directamente, solamente el JS del modulo a la funcion que se vaya a exportar se le poner ( export function nameFunction (){bloquede codigo} ) y la importacion se hace igual a los otros metodos solo que esta vez en HTML en la etiqueta script se pone como atributo type: "module" y despues el src del modulo (archivo JS) 




dynamic import - hace la utilizacion de las async function para importar un modulo cuando es requerido y no cuando se cargue el archivo HTML, su principal funcion es aligerar la carga de la pagina web al usuario y que los modulos se vayan cargando dependiendo de las acciones de los usuarios;

button.addEventListener("click", async function () {
    const module = await import("./module.js");
    console.log(module);
    module.hello();
})  En este caso el archivo HTML aun no sabe de la existencia de module.js hasta que el addEventListener escucha el evento de click y le indica a HTML que cargue el modulo de JS 



generator - generadores o funciones generadoras - es un tipo de funcion especial (function*) que tiene varios operadores para retornar valores recordando su estado sin tener que pasarle un valor,

yield funciona paracido a return pero solo en las funciones generadoras ya que en estas cuando se utiliza el return corta el loop,

con la funcion .next imprime el array en posicion 0 pero si se ejecuta  mas veces va a recordar cual fue la posicion que ejecuto y ejecutara la siguiente posicion;

function* iterate(array)  {
    for (let value of array) {
        yield value;
    }
}

const it = iterate(["Oscar", "Alexa", "David", "Gerlis"]);
console.log(it.next().value);
console.log(it.next().value);
console.log(it.next().value);

tambien se pueden utilizar las funciones asincronas en los generators con las palabras async antes de la function* y con el await despues del yield;

async function* anotherGenerator() {
    yield await Promise.resolve(1);
    yield await Promise.resolve(2);
    yield await Promise.resolve(3);
}

const other = anotherGenerator();
other.next().then(response => console.log(response.value));
other.next().then(response => console.log(response.value));
other.next().then(response => console.log(response.value));
console.log("hello");



set and add - añade un nuevo elemento (add) a un objeto set; cuando se utiliza el objeto Set debe este debe ser declarado siempre en mayuscula inical (Set);

const list = new Set();

list.add(`item 1`);
list.add(`item 2`).add(`item 3`) -para encadenar varios add en una sola linea;

console.log(list)



padding - es una funcion que permite midificar string ya sea al inicio o al final,

padStart - sirve para modificar un string en su inicio dandole la cantidad de caracteres que se quiera que este tenga (variable.padStart(#de caracteres total que va a tener el string contando los que ya tenia, `el string que se va a agregar`));

let string1 = `Hello`

console.log(string1.padStart(20, `Yo estoy antes `));


padEnd - sirve para modificar un string en su final dandole la cantidad de caracteres que se quiera que este tenga (variable.padEnd(#de caracteres total que va a tener el string contando los que ya tenia, `el string que se va a agregar`))

let string2 = `Hello`

console.log(string2.padEnd(25, ` Yo voy de ultimo :(`));



trimEnd, trimStart, trim - sirven para eliminar espacios vacios de un string;

const hello = "       Hello World!   ";
console.log(hello.trimStart());
console.log(hello.trimEnd());
console.log(hello.trim());



try - catch - funciona para ejecucar una funcion (con try) y si no se ejecuta pasa al catch y poder personalizar un mensaje de error o hacer algo con el error que devuelva este metodo;

try {
    hello ();
} catch (error) {
    console.log(error);
} - para hacer algo con el error;

try {
    onotherFn();
} catch {
    console.log("esto es un error")
} - para personalizar el mensaje de error;



optional chaining - sirve para evitar errores en una validacion si lo que se solicita no existe o se elimino utilizando ? despues de lo que se esta solicitando;

const users = {
    gndx: {
        country: "MX"
    },
    ana: {
        country: "CO"
    }
}
console.log(users?.bebeloper?.country); en este caso daria como resultado undefined pero se puede personalizar el mensaje con || al final del requerimiento ej - console.log(users.usuarioInventado?.country || 'No existe esa información en la base de datos');



BigInt - sirve para trabajar con numeros muy grandes, es importante utilizar estos metodos ya que sino JS puede hacer un aproximado del numero y puede dañar el resultado esperado;

const aBigNumber = 8907245920742093847n; forma anterior de trabajarlos;
const anotherBigNumber = BigInt(8907245920742093847); actulizacion con ECMAScript2020
console.log(aBigNumber);
console.log(anotherBigNumber);



Nullish - sirve para dar un valor a una variable en el caso de que el valor que retorne la variable sea null o undefined utilizando ?? y se difenrencia del operador or (||) de que or retorna el valor de la derecha si el de la izq es falsy((0, “”, false, NAN, undefined, null)) y nullish (??) retorna el valor de la derecha solo si es null o undefined

const anotherNumber = null;
const validate = anotherNumber ?? 5;  const validate = anotherNumber || 5;
console.log(validate); 



matchAll - para encontrar coincidencias en una cadena de texto (strings);

const fruit = "Apple, Banana, Kiwi, Apple, Orange, etc. etc. etc.";

for (const match of fruit.matchAll(`Apple`)) {
    console.log(match);
};



replace - replaceAll - sirve para modificar palabras de un string por otras palabras la unica diferencia es que replace solo modifica la primera coincidencia y replaceAll modifica todas las coincidencias del string dado- string.replaceAll(`lo que se quiera modificar`, `el  nuevo valor que va a tener`);

const string = "JavaScript es un maravilloso lenguaje de  programacion";

const replacedString = string.replace("JavaScript", "TypeScript");

console.log(replacedString);


